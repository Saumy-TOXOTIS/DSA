class Solution {
private:
    void DFS(int node,vector<vector<int>>& network,vector<bool>& visited,vector<vector<int>>& data,int parent)
    {
        visited[node] = true;
        data[node].push_back(parent);
        for(auto child : network[node])
        {
            if(!visited[child])
            {
                DFS(child,network,visited,data,parent);
            }
        }
    }
public:
    int minMalwareSpread(vector<vector<int>>& graph,vector<int>& infected) {
        int n = graph.size();
        vector<vector<int>> network(n);
        for(int i = 0;i < n;i++)
        {
            for(int j = 0;j < n;j++)
            {
                if(graph[i][j])
                {
                    network[i].push_back(j);
                    network[j].push_back(i);
                }
            }
        }
        int m = infected.size();
        vector<vector<int>> data(n);
        for(auto node : infected)
        {
            vector<bool> visited(n,false);
            DFS(node,network,visited,data,node);
        }
        vector<int> count(n,0);
        for(int i=0;i<n;i++)
        {
            if(data[i].size() == 1)
            {
                count[data[i][0]]++;
            }
        }
        int ans = -1;
        int maxCount = -1;
        sort(infected.begin(),infected.end());
        for(auto node : infected)
        {
            if(count[node] > maxCount)
            {
                maxCount = count[node];
                ans = node;
            }
        }
        return ans;
    }
};